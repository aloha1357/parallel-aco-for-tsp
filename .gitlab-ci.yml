# GitLab CI/CD Configuration for Parallel ACO for TSP
# This configuration provides automated testing and building for C++ project

stages:
  - build
  - test
  - analysis
  - deploy

variables:
  CMAKE_BUILD_TYPE: "Release"
  BUILD_DIR: "build"

# Base template for C++ builds
.cpp_template: &cpp_template
  image: gcc:latest
  before_script:
    - apt-get update -qq
    - apt-get install -y cmake ninja-build
    - mkdir -p ${BUILD_DIR}

# Build stage - Compile the project
build:
  <<: *cpp_template
  stage: build
  script:
    - cd ${BUILD_DIR}
    - cmake .. -G Ninja -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
    - ninja
  artifacts:
    paths:
      - ${BUILD_DIR}/
    expire_in: 1 hour
  cache:
    key: build-cache-$CI_COMMIT_REF_SLUG
    paths:
      - ${BUILD_DIR}/

# Unit Tests
unit_tests:
  <<: *cpp_template
  stage: test
  dependencies:
    - build
  script:
    - cd ${BUILD_DIR}
    - ./unit_tests
  artifacts:
    reports:
      junit: ${BUILD_DIR}/test_results.xml
    when: always

# Performance Tests
performance_tests:
  <<: *cpp_template
  stage: test
  dependencies:
    - build
  script:
    - cd ${BUILD_DIR}
    - echo "Running performance tests..."
    - ./quick_aco_experiment
  artifacts:
    paths:
      - ${BUILD_DIR}/*.csv
      - ${BUILD_DIR}/*.md
    expire_in: 1 week
  only:
    - main
    - merge_requests

# Code Quality Analysis
code_analysis:
  image: gcc:latest
  stage: analysis
  before_script:
    - apt-get update -qq
    - apt-get install -y cppcheck clang-tidy
  script:
    - echo "Running static code analysis..."
    - cppcheck --enable=all --xml --xml-version=2 src/ include/ 2> cppcheck-report.xml || true
    - echo "Static analysis completed"
  artifacts:
    paths:
      - cppcheck-report.xml
    expire_in: 1 week
  allow_failure: true

# Memory Check (Valgrind)
memory_check:
  <<: *cpp_template
  stage: analysis
  dependencies:
    - build
  before_script:
    - apt-get update -qq
    - apt-get install -y cmake ninja-build valgrind
  script:
    - cd ${BUILD_DIR}
    - echo "Running memory leak detection..."
    - valgrind --tool=memcheck --leak-check=full --xml=yes --xml-file=valgrind-report.xml ./unit_tests || true
  artifacts:
    paths:
      - ${BUILD_DIR}/valgrind-report.xml
    expire_in: 1 week
  allow_failure: true
  only:
    - main

# Documentation Build (if you have Doxygen)
documentation:
  image: alpine:latest
  stage: analysis
  before_script:
    - apk add --no-cache doxygen graphviz
  script:
    - echo "Building documentation..."
    - doxygen Doxyfile || echo "No Doxyfile found, skipping documentation"
  artifacts:
    paths:
      - docs/
    expire_in: 1 week
  allow_failure: true
  only:
    - main

# Release Build for Tags
release_build:
  <<: *cpp_template
  stage: deploy
  script:
    - cd ${BUILD_DIR}
    - cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=../install
    - ninja
    - ninja install
    - tar -czf parallel-aco-tsp-${CI_COMMIT_TAG}.tar.gz -C ../install .
  artifacts:
    paths:
      - parallel-aco-tsp-*.tar.gz
    expire_in: 1 month
  only:
    - tags

# Benchmark Results Collection
benchmark_collection:
  <<: *cpp_template
  stage: deploy
  dependencies:
    - performance_tests
  script:
    - echo "Collecting benchmark results..."
    - cd ${BUILD_DIR}
    - ls -la *.csv *.md || echo "No benchmark files found"
  artifacts:
    paths:
      - ${BUILD_DIR}/*.csv
      - ${BUILD_DIR}/*.md
    expire_in: 1 month
  only:
    - main

# Multi-platform build matrix
.build_matrix: &build_matrix
  parallel:
    matrix:
      - CMAKE_BUILD_TYPE: ["Debug", "Release"]

# Build with different configurations
build_matrix:
  <<: *cpp_template
  <<: *build_matrix
  stage: build
  script:
    - mkdir -p build-${CMAKE_BUILD_TYPE}
    - cd build-${CMAKE_BUILD_TYPE}
    - cmake .. -G Ninja -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
    - ninja
  artifacts:
    paths:
      - build-${CMAKE_BUILD_TYPE}/
    expire_in: 1 hour
  except:
    - main  # Only run matrix on feature branches

# Cleanup cache periodically
cleanup_cache:
  stage: deploy
  script:
    - echo "Cleaning up old cache..."
  cache:
    key: build-cache-$CI_COMMIT_REF_SLUG
    policy: push
    paths: []
  only:
    - schedules
